name: Test Snippets

on:
  workflow_call:
    inputs:
      stack:
        type: string
        description: "Directory containing the snippets"
        required: true

env:
  SNIPPET_DIR: src/${{ inputs.stack }}

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  changed-files:
    name: Determine snippets to test
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - name: Determine test scope
        id: check-label
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "all_snippets=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Convert the array of labels to a single space-delimited string
            LABELS=" ${{ join(github.event.pull_request.labels.*.name) }} "
            # Check if LABELS contains both "ci" and "python"
            if [[ "$LABELS" == *"trigger-ci"* && "$LABELS" == *"${{ inputs.stack }}"* ]]; then
              echo "all_snippets=true" >> $GITHUB_OUTPUT
            else
              echo "all_snippets=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "all_snippets=false" >> $GITHUB_OUTPUT
          fi

      - name: Get changed files
        if: steps.check-label.outputs.all_snippets == 'false'
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          matrix: true
          json: true
          dir_names: true
          dir_names_exclude_current_dir: true
          files: ${{ env.SNIPPET_DIR }}/**

      - name: Generate matrix
        id: build-matrix
        shell: bash
        run: |
            set -x
            python .github/scripts/matrix.py >> $GITHUB_OUTPUT
        env:
          ALL_SNIPPETS: ${{ steps.check-label.outputs.all_snippets }}
          SNIPPET_DIR: ${{ env.SNIPPET_DIR }}
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}

      - name: Print final matrix
        run: echo "${{ steps.build-matrix.outputs.matrix }}"

  test:
    name: "${{ matrix.snippet.name }}"
    runs-on: ubuntu-latest
    needs: [changed-files]
    timeout-minutes: 10
    permissions:
      id-token: write
    strategy:
      matrix:
        snippet: ${{ fromJSON(needs.changed-files.outputs.matrix) }}
      max-parallel: 4
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        if: ${{ inputs.stack == 'java' }}
        with:
          distribution: 'adopt'
          java-version: '11'
          cache: 'gradle'
          cache-dependency-path: |
            src/java/*.gradle*
            src/java/**/*.gradle*
      #- uses: nixbuild/nix-quick-install-action@master
      - uses: cachix/install-nix-action@v30
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - uses: cachix/cachix-action@v15
        with:
          name: devenv
      # - name: Restore and cache Nix store
      #   if: ${{ !contains(github.event.pull_request.labels.*.name, 'Skip cache') }}
      #   uses: nix-community/cache-nix-action@v5
      #   with:
      #     primary-key: nix-${{ inputs.stack }}-${{ matrix.snippet.name }}-${{ hashFiles(format('{0}/devenv.nix', matrix.snippet.dir), format('{0}/devenv.lock', matrix.snippet.dir)) }}
      #     #restore-prefixes-first-match: nix-${{ inputs.stack }}-${{ matrix.snippet.name }}
      #     paths: |
      #       /nix
      #       ~/.cache/nix
      #       ~root/.cache/nix
      #     gc-max-store-size: 3073741824
      #     purge: true
      #     purge-prefixes: nix-${{ inputs.stack }}-
      #     purge-last-accessed: 3600
      #     purge-primary-key: never
      #     save-always: true
      - name: Install devenv.sh
        run: nix profile install nixpkgs#devenv
      - name: Devenv CI
        working-directory: ${{ matrix.snippet.dir }}
        run: devenv ci -d
      - name: Devenv Shell Lint
        working-directory: ${{ matrix.snippet.dir }}
        run: devenv shell -- lint
